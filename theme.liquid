<!-- prep settings-->
<fieldset>
  <legend>Modal Styles</legend>
  <table>
    <tr>
      <th><label for="modal_bg_color">Modal Overlay Color</label></th>
      <td><input type="text" id="modal_bg_color" name="modal_bg_color" class="color" value="#ffffff"/></td>
    </tr>
    <tr>
      <th><label for="modal_bg_transparency">Modal Overlay Opacity (0&ndash;1.0)</label></th>
      <td><input type="text" id="modal_bg_transparency" name="modal_bg_transparency" class="text" value="0.75"/></td>
    </tr>
    <tr>
      <th><label for="signup_text_align">Email Signup Wrapper Text Align</label></th>
      <td>
        <select name="signup_text_align" id="signup_text_align">
          <option value="left" selected="selected">Left</option>
          <option value="center">Center</option>
          <option value="right">Right</option>
        </select>
      </td>
    </tr>
    <tr>
      <th><label for="signup_bg_color">Signup Background Color</label></th>
      <td><input type="text" id="signup_bg_color" name="signup_bg_color" class="color" value="#ffffff"/></td>
    </tr>
    <tr>
      <th><label for="signup_bg_color">Signup Background Color</label></th>
      <td><input type="text" id="signup_bg_color" name="signup_bg_color" class="color" value="#ffffff"/></td>
    </tr>
  </table>
</fieldset>


<fieldset>
  <legend>Popup Modal Email Signup</legend>
  <table>
    <tr>
      <th><label for="modal_signup_first">Which Visit to Popup First</label></th>
      <td>
        <select name="modal_signup_first" id="modal_signup_first">
          <option value="0" selected="selected">0 (inactive)</option>
          <option value="1">1st</option>
          <option value="2">2nd</option>
          <option value="3">3rd</option>
          <option value="4">4th</option>
        </select>
      </td>
    </tr>
    <tr>
      <th><label for="modal_signup_total">Pop Up on Multiple Visits?</label></th>
      <td>
        <select name="modal_signup_total" id="modal_signup_total">
          <option value="0" selected="selected">No, just once</option>
          <option value="1">twice</option>
          <option value="2">three times</option>
          <option value="3">four times</option>
        </select>
      </td>
    </tr>
    <tr>
      <th><label for="modal_signup_page_view">Within a visit, which page?</label></th>
      <td>
        <select name="modal_signup_page_view" id="modal_signup_page_view">
          <option value="1" selected="selected">1st page</option>
          <option value="2">2nd page</option>
          <option value="3">3rd page</option>
          <option value="4">4th page</option>
        </select>
      </td>
    </tr>
    <tr>
      <th><label for="modal_signup_delay_time">Pop Up Delay Time (milliseconds)</label></th>
      <td><input type="input" name="modal_signup_delay_time" id="modal_signup_delay_time" size="10" value="2000" /></td>
    </tr>
  </table>
</fieldset>


<!-- 1. Take your Campaign Monitor subscribe form as generated from within your account: -->
<div class="signupHolder">
  <div class="ycenter">
    <div class="xcenter">
      <div class="modal">
        <!-- [form is t3-modified html5 - copy and paste values for best results:] -->
        <form action="http://myaccount.createsend.com/a/b/c/defgh/" method="post" class="subForm">
          <fieldset>
            <legend>{{ settings.signup_title }}</legend>
            <label for="name">Name:</label><br>
            <input type="text" name="cm-name" id="name"><br>
            <label for="abcd-efgh">Email:</label><br>
            <input type="text" name="cm-abcd-efgh" id="abcd-efgh" placeholder="Your Email Address"{% if customer %} value="{{ customer.email }}"{% endif %} required><br>
            <input type="submit" value="{{ settings.signup_submit_text }}" class="awesome">
          </fieldset>
        </form>
      </div>
    </div>
  </div>
</div>
<a href="http://" class="popupTrigger">{{ settings.popup_signup_trigger }}</a>

<!-- 2. Add some JavaScript -->

  <script type="text/javascript">
    (function($){
      var CampaignMonitorPopup = function (element, options) {
        var settings = {
          CookieName: 'CampaignMonitorPopup',
          SessionCookieName: 'CampaignMonitorPopupSession',
          Visits: [],
          Delay: 10000,
          PageViewNumber: 1,
          CloseSelectors: [],
          ShowSelectors: [],
          ShowPopupOnCurrentPage:false,
          CallBackOnSuccess:null,
          CallBackOnError:null,
          RedirectOnSubmitSuccess:false
        };
        $.extend(settings, options || {});
        var _VisitingCookieTracker = {
          Status: '',
          PageView: 0,
          Visits: 0,
          PopupAlreadyShownOnVisit: []
        };
        var _CookieValues = {
          NotSubmitted: 'NotSubmitted',
          HasSubmitted: 'HasSubmitted',
          ShowOnNextVisit: 'ShowOnNextVisit',
          ErrorInSubmitted: 'ErrorInSubmitted'
        };
        var _MainWrapper = element;
        var _CMPForm = $('form',_MainWrapper);
        var CMP = {
          Initialize: function () {
            this.Hide(false);
            this.ReadAndSetupCookieValues();
            this.InitCustomEvents();
          },
          InitCustomEvents: function () {
            for(var i=0;i<settings.CloseSelectors.length;i++){
              var element = $(settings.CloseSelectors[i]);
              element.click(function(e){
                CMP.Hide();
                e.stopPropagation();
                return false;
              });
            }
            for(var i=0;i<settings.ShowSelectors.length;i++){
              var element = $(settings.ShowSelectors[i]);
              element.click(function(e){
                CMP.Show(true);
                e.stopPropagation();
                return false;
              });
            }

            $(document).keydown(function(e){
              keycode = e == null ? event.keyCode : e.which;
              if (keycode == 27){
                CMP.Hide(true);
              }
            });
          },
          Hide: function (saveCookie) {
            _MainWrapper.hide('fast');
            if (saveCookie) {}
          },
          ReadAndSetupCookieValues: function () {
            var sessionCookie = CookieManager.ReadCookie(settings.SessionCookieName);
            var cmpCookieValue = this.ReadJsonFromCookie(settings.CookieName);
            if (cmpCookieValue == null && sessionCookie == null) {
              CookieManager.CreateCookie(settings.SessionCookieName, 1);
              this.SaveJsonToCookie(settings.CookieName, _CookieValues.ShowOnNextVisit, 1, 1, '', 30);
              cmpCookieValue = this.ReadJsonFromCookie(settings.CookieName);
            }else {
              //save default values to cookie.
              if (cmpCookieValue == null) {
                this.SaveJsonToCookie(settings.CookieName, _CookieValues.ShowOnNextVisit, 1, 1, '', 30);
                cmpCookieValue = this.ReadJsonFromCookie(settings.CookieName);
              }
              //new session.
              if (sessionCookie == null) {
                var obj = cmpCookieValue;
                var visitNumber = obj.Visits + 1;
                var pageViewNumber = obj.PageView;
                CookieManager.CreateCookie(settings.SessionCookieName, visitNumber);
                if (obj.Status == _CookieValues.ShowOnNextVisit) {
                  this.SaveJsonToCookie(settings.CookieName, _CookieValues.ShowOnNextVisit, pageViewNumber, visitNumber, '', 30);
                }
              }
            }
            if (cmpCookieValue.Status == _CookieValues.ShowOnNextVisit && settings.ShowPopupOnCurrentPage) {
              CMP.ProcessCookiesValuesAndShowPopupIfNeeded();
            }
          },
          SaveJsonToCookie: function (cookieName, status, pageview, visits, visitpopupshown, duration) {
            _VisitingCookieTracker.Status = status;
            _VisitingCookieTracker.PageView = pageview;
            _VisitingCookieTracker.Visits = visits;
            if (visitpopupshown != '') {
              _VisitingCookieTracker.PopupAlreadyShownOnVisit.push(visitpopupshown);
            }
            CookieManager.CreateCookie(cookieName, JSON.stringify(_VisitingCookieTracker), duration);
          },
          ReadJsonFromCookie: function (cookieName) {
            var cookieObj = CookieManager.ReadCookie(cookieName);
            var obj = null;
            if (cookieObj != null) {
              try {
                obj = JSON.parse(cookieObj);
              } catch (e) {
                if (cookieObj.indexOf(_CookieValues.HasSubmitted) != -1) {
                  CMP.SaveJsonToCookie(cookieName, _CookieValues.HasSubmitted, '', '', '', 365)
                  obj = JSON.parse(CookieManager.ReadCookie(cookieName));
                }
              }
            }
            return obj;
          },
          ProcessCookiesValuesAndShowPopupIfNeeded: function () {
            var cookieObj = this.ReadJsonFromCookie(settings.CookieName);
            var dataTransferObject = {PageView: 0,Visits: 0,NeedToShowPopupOnCurrentVisit: false,NeedToShowPopupOnCurrentPageView: false,PopupAlreadyShown: false,ShowPopup: false};
            dataTransferObject.PageView = parseInt(cookieObj.PageView);
            dataTransferObject.Visits = parseInt(cookieObj.Visits);
            if (cookieObj.PopupAlreadyShownOnVisit.length > 0) {
              dataTransferObject.PopupAlreadyShown = ($.inArray(dataTransferObject.Visits, cookieObj.PopupAlreadyShownOnVisit) != -1)
            }
            dataTransferObject.NeedToShowPopupOnCurrentVisit = (($.inArray(dataTransferObject.Visits, settings.Visits) != -1) && !dataTransferObject.PopupAlreadyShown);
            dataTransferObject.NeedToShowPopupOnCurrentPageView = (dataTransferObject.PageView == settings.PageViewNumber);
            if (dataTransferObject.NeedToShowPopupOnCurrentVisit) {
              if (dataTransferObject.PageView <= settings.PageViewNumber) {
                if (dataTransferObject.NeedToShowPopupOnCurrentPageView) {
                  this.SaveJsonToCookie(settings.CookieName, _CookieValues.ShowOnNextVisit, 1, dataTransferObject.Visits, dataTransferObject.Visits, 30);
                } else {
                  var pageview = dataTransferObject.PageView + 1;
                  this.SaveJsonToCookie(settings.CookieName, _CookieValues.ShowOnNextVisit, pageview, dataTransferObject.Visits, '', 30);
                }
              }
            }
            if (dataTransferObject.Visits > settings.Visits[settings.Visits.length - 1]) {
              // Visiting number is bigger
            }
            dataTransferObject.ShowPopup = dataTransferObject.NeedToShowPopupOnCurrentVisit && dataTransferObject.NeedToShowPopupOnCurrentPageView;
            if (dataTransferObject.ShowPopup){
              this.Show(false);
            }
          },
          Show: function (clickEvent) {
            var delay = clickEvent ? 1000 : settings.Delay;
            setTimeout(function(){
              _MainWrapper.show();
              CMP.InitBValidator();
              CMP.InitAjaxSubmit();
            },delay);
          },
          InitBValidator:function(){
            var bValidatorOptions = {singleError:true};
            _CMPForm.bValidator(bValidatorOptions);
          },
          InitAjaxSubmit:function(){
            _CMPForm.submit(function(e){
              var url = this.action + '?callback=?';
              var formData = _CMPForm.serialize();
              $.getJSON(url,formData,CMP.AjaxFormSubmitCallBack);
              e.stopPropagation();
              return false;
            });
          },
          AjaxFormSubmitCallBack:function(data){
            //console.log(data);
            if(data.Status === 200){
              var message = data.Message;
              CMP.SaveJsonToCookie(settings.CookieName,_CookieValues.HasSubmitted,'','','',365);
              if(settings.RedirectOnSubmitSuccess && data.RedirectUrl){
                window.location = data.RedirectUrl;
                return;
              }
              if(settings.CallBackOnSuccess){
                settings.CallBackOnSuccess(data, _MainWrapper);
              }else{
                alert(message);
                CMP.Hide();
              }
            }else{
              if(settings.CallBackOnError){
                settings.CallBackOnError(data);
              }
            }
          }
        };
        (function () {
          CMP.Initialize();
        })();
      };
      $.fn.CampaignMonitorPopup = function(options){
        return new CampaignMonitorPopup(this,options);
      }
    })(jQuery);

    //Must be in some shared.js
    var CookieManager = {
      CreateCookie: function (name, value, days) {
        if (days) {
          var date = new Date();
          date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
          var expires = "; expires=" + date.toGMTString();
        } else var expires = "";
        document.cookie = name + "=" + value + expires + "; path=/";
      },
      ReadCookie: function (name) {
        var nameEQ = name + "=";
        var ca = document.cookie.split(';');
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') c = c.substring(1, c.length);
          if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
        }
        return null;
      },
      EraseCookie: function (name) {
        createCookie(name, "", -1);
      }
    };
    //https://gist.github.com/jdennes/1155479
  </script>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js"></script> 
  {{ 'jquery.bvalidator.js' | asset_url | script_tag }}
  {{ 'jquery.campaignmonitorpopup.js' | asset_url | script_tag }}
  <script type="text/javascript">
    {% if template == 'cart' %}
      var showPopupOnThisPage = false;
    {% else %}
      var showPopupOnThisPage = true;
    {% endif %}
    $(function(){
      var options = {
        {% assign first_visit = settings.modal_signup_first %}
        {% assign total_visits = settings.modal_signup_total %}
        Visits:[{{ first_visit }}{% for i in (1..total_visits) %}{% capture next_visit %}{{ first_visit | plus: i }}{% endcapture %},{{ next_visit }}{% endfor %}],
        Delay:{{ settings.modal_signup_delay_time }},
        PageViewNumber:{{ settings.modal_signup_page_view }},
        ShowPopupOnCurrentPage:showPopupOnThisPage,
        CloseSelectors:['.popupClose'],
        ShowSelectors:['.popupTrigger'],
        RedirectOnSubmitSuccess:true
      };
      $('.subForm').CampaignMonitorPopup(options);
    });
  </script>
  
  <script type="text/javascript">
    $(document).ready(function() {

      $('.popupTrigger').click(function(){ $('.signupHolder').addClass('modalize'); return false;})
      $('.signupHolder').click(function(){ $(this).removeClass('modalize');})
      $('.modal').click(function(e){ e.stopPropagation();});

      $('.subForm').submit(function (e) {
        e.preventDefault();
        $.getJSON(
        this.action + "?callback=?",
        $(this).serialize(),
        function (data) {
          if (data.Status === 400){
            alert("Error: " + data.Message);
          } else { // 200
            alert("Success: " + data.Message);
          }
        });
      });
    });
  </script>

  <!-- aand 3. add some styles and you can have a Popup AJAX subscribe form! -->

  <style type="text/css"> // scss actually
    .signupHolder{ 
      display:none; /* or not? doesn't matter... */
    }
    .modalize{ // this is midnight genius, works x-browser as far as I can tell
      display:block;
      .ycenter{ display:table; position:fixed; top:0; left:0; bottom:0; right:0; width:100%; height:100%; z-index:10000; background-color:rgba({{ settings.modal_bg_color }}, {{ settings.modal_bg_transparency }}); text-align:{{ settings.signup_text_align }};}
      .xcenter{ display:table-cell; vertical-align:middle; text-align:center;}
      .modal{ display:inline-block; *display:inline; zoom:1; background:{{ settings.signup_bg_color }}; border:1px solid {{ settings.signup_border_color }}; padding:1em; box-shadow:0 0 2px rgba(0,0,0,0.15);}
    }
  </style>